@page "/customer/new"
@page "/customer/{id:int}"
@page "/customer/{id:int}/edit"

@using Model
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.ChangeTracking
@using System.Text.RegularExpressions

@inject DialogService DialogService
@inject IDbContextFactory<DatabaseContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@implements IDisposable

<RadzenTemplateForm Context="RadzenTemplateForm" TItem="Model.Customer" Data="customer" Submit=@OnSubmitCustomer>
    <div class="row px-3">
        <div class="col-md-6 col-lg-12 p-3">
            <RadzenCard>
                <h2>Cliente @customer!.Names @customer!.Lastnames</h2>
            </RadzenCard>
        </div>
        <AuthorizeView Policy="Customer.Edit">
            <div class="col-md-6 col-lg-12 p-3">
                <RadzenCard>
                    <div>
                        <span>
                            <RadzenButton Icon="edit" Click="EditCustomer" Text="Editar" Visible=!editing />
                        </span>
                        <span>
                            <RadzenButton Icon="save" ButtonType="ButtonType.Submit" Text="Guardar" Visible=editing />
                        </span>
                        <span>
                            <RadzenButton Icon="cancel" Click="CancelEditCustomer" Text="Cancelar" ButtonStyle="ButtonStyle.Warning" Visible=editing />
                        </span>
                        <span>
                            <RadzenButton Icon="delete" Text="Eliminar" ButtonStyle="ButtonStyle.Danger" Click=@(args => DialogService.Confirm("¿Estás seguro de eliminar el cliente?", "Eliminar cliente.", new ConfirmOptions() { OkButtonText = "Si", CancelButtonText = "No" })) Visible=editing&&!isNewItem />
                        </span>
                    </div>
                </RadzenCard>
            </div>
        </AuthorizeView>
        <div class="col-md-6 col-lg-4 p-3">
            <RadzenCard>
                <h5 class="mb-4">Nombre(s)</h5>
                <RadzenTextBox Name="Names" @bind-Value=customer!.Names Class="w-100" ReadOnly=!editing Style="display: block" />
                <RadzenRequiredValidator Component="Names" Text="Se requeire un nombre." Popup=true Style="position: relative" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 p-3">
            <RadzenCard>
                <h5 class="mb-4">Apellido(s)</h5>
                <RadzenTextBox Name="Lastnames" @bind-Value=customer!.Lastnames Class="w-100" ReadOnly=!editing Style="display: block" />
                <RadzenRequiredValidator Component="Lastnames" Text="Se requiere un apellido." Popup=true Style="position: relative" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-4 p-3">
            <RadzenCard>
                <h5 class="mb-4">Correo electrónico</h5>
                <RadzenTextBox Name="Email" @bind-Value=customer!.Email Class="w-100" ReadOnly=!editing Style="display: block" />
                <RadzenEmailValidator Component="Email" Text="Ingrese un email válido." Popup=true Style="position: relative" />
            </RadzenCard>
        </div>
    </div>
</RadzenTemplateForm>
<div class="col-md-6 col-lg-6 p-3">
    <RadzenCard>
        <div>
            <RadzenButton Icon="add_circle_outline" Text="Agregar teléfono" Click="@InsertRowCustomerPhoneNumber" Disabled=@(customerPhoneNumberToInsert != null) Visible=editing />
        </div>
        <br />
        <div>
            <RadzenDataGrid @ref="customerPhoneNumbersGrid" AllowFiltering="false" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single" Data="@customer!.CustomerPhoneNumbers" TItem="CustomerPhoneNumber" RowUpdate="@OnUpdateRowCustomerPhoneNumber">
                <Columns>
                    <RadzenDataGridColumn TItem="CustomerPhoneNumber" Property="PhoneNumber" Title="Teléfonos">
                        <EditTemplate Context="customerPhoneNumber">
                            <RadzenTextBox @bind-Value="customerPhoneNumber.PhoneNumber" Name="PhoneNumber" Style="width:100%; display: block" />
                            <RadzenRequiredValidator Component="PhoneNumber" Text="Se requiere un teléfono." Popup=true />
                            <RadzenRegexValidator Component="PhoneNumber" Text="El teléfono no tiene un formato válido." Pattern=@Constants.PhoneNumberRegex Popup=true />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="CustomerPhoneNumber" Context="customerPhoneNumber" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="95px" Visible=editing>
                        <Template Context="customerPhoneNumber">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Size="ButtonSize.Small" Click="@(args => EditRowCustomerPhoneNumber(customerPhoneNumber))" @onclick:stopPropagation="true" />
                        </Template>
                        <EditTemplate Context="customerPhoneNumber">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Size="ButtonSize.Small" Click="@((args) => SaveRowCustomerPhoneNumber(customerPhoneNumber))" />
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Size="ButtonSize.Small" Click="@((args) => CancelEditRowCustomerPhoneNumber(customerPhoneNumber))" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="CustomerPhoneNumber" Context="customerPhoneNumber" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="60px" Visible=editing>
                        <Template Context="customerPhoneNumber">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Size="ButtonSize.Small" Click="@(args => DeleteRowCustomerPhoneNumber(customerPhoneNumber))" @onclick:stopPropagation="true" />
                        </Template>
                        <EditTemplate Context="customerPhoneNumber">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Class="m-1" Size="ButtonSize.Small" Click="@(args => DeleteRowCustomerPhoneNumber(customerPhoneNumber))" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    </RadzenCard>
</div>

@code {

    [Parameter]
    public int? Id { get; set; }

    private RadzenDataGrid<CustomerPhoneNumber>? customerPhoneNumbersGrid;

    private CustomerPhoneNumber? customerPhoneNumberToInsert;

    private Model.Customer? customer;

    private DatabaseContext? databaseContext;

    private bool editing = false;

    private bool isNewItem = false;

    private bool editingCustomerPhoneNumberRow = false;

    private AzureUser? azureUser;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected override void OnInitialized()
    {
        DialogService.OnClose += CloseDialog;
        databaseContext = DbFactory.CreateDbContext();
        azureUser = AzureUserManager.Get(databaseContext, AuthenticationStateProvider);

        if (Id != null)
        {
            customer = databaseContext.Customers.Include(c => c.CustomerPhoneNumbers).FirstOrDefault(c => c.Id == Id && !c.Deleted);

            if (customer != null)
            {
                if (NavigationManager.Uri.Contains("edit"))
                {
                    editing = true;
                }
            }

            else
            {
                NavigationManager.NavigateTo("/404/", true);
            }
        }

        else if (NavigationManager.Uri.Contains("new"))
        {
            isNewItem = true;
            editing = true;
            customer = new Model.Customer();
            customer.CreatedById = azureUser.Id;
            databaseContext!.Add(customer);
        }
    }

    public void Dispose()
    {
        DialogService.OnClose -= CloseDialog;
    }

    private void EditCustomer()
    {
        NavigationManager.NavigateTo("/customer/" + customer!.Id + "/edit", true);
    }

    private void CancelEditCustomer()
    {
        if (!isNewItem)
        {
            NavigationManager.NavigateTo("/customer/" + customer!.Id, true);
        }

        else
        {
            NavigationManager.NavigateTo("/customers/", true);
        }
    }

    private async Task DeleteRowCustomerPhoneNumber(CustomerPhoneNumber customerPhoneNumber)
    {
        if (customerPhoneNumber == customerPhoneNumberToInsert)
        {
            customerPhoneNumberToInsert = null;
        }

        if (customer!.CustomerPhoneNumbers!.Contains(customerPhoneNumber))
        {
            customer.CustomerPhoneNumbers.Remove(customerPhoneNumber);
            await customerPhoneNumbersGrid!.Reload();
        }

        else
        {
            customerPhoneNumbersGrid!.CancelEditRow(customerPhoneNumber);
        }
    }

    private async Task EditRowCustomerPhoneNumber(CustomerPhoneNumber customerPhoneNumber)
    {
        customerPhoneNumberToInsert = customerPhoneNumber;
        await customerPhoneNumbersGrid!.EditRow(customerPhoneNumber);
    }

    private void CancelEditRowCustomerPhoneNumber(CustomerPhoneNumber customerPhoneNumber)
    {
        if (customerPhoneNumber == customerPhoneNumberToInsert)
        {
            customerPhoneNumberToInsert = null;
        }

        customerPhoneNumbersGrid!.CancelEditRow(customerPhoneNumber);
        EntityEntry<CustomerPhoneNumber> entityEntry = databaseContext!.Entry(customerPhoneNumber);

        if (entityEntry.State == EntityState.Modified)
        {
            entityEntry.CurrentValues.SetValues(entityEntry.OriginalValues);
            entityEntry.State = EntityState.Unchanged;
        }
    }

    private async Task SaveRowCustomerPhoneNumber(CustomerPhoneNumber customerPhoneNumber)
    {
        Match match = Regex.Match(customerPhoneNumber!.PhoneNumber!, Constants.PhoneNumberRegex, RegexOptions.IgnoreCase);

        if (match.Success)
        {
            if (customerPhoneNumber == customerPhoneNumberToInsert)
            {
                customerPhoneNumberToInsert = null;
            }

            customer!.CustomerPhoneNumbers!.Add(customerPhoneNumber);
            await customerPhoneNumbersGrid!.UpdateRow(customerPhoneNumber);
        }
    }

    private async Task InsertRowCustomerPhoneNumber()
    {
        customerPhoneNumberToInsert = new CustomerPhoneNumber();
        customerPhoneNumberToInsert.PhoneNumber = string.Empty;
        await customerPhoneNumbersGrid!.InsertRow(customerPhoneNumberToInsert);
    }

    private void OnUpdateRowCustomerPhoneNumber(CustomerPhoneNumber customerPhoneNumber)
    {
        if (customerPhoneNumber == customerPhoneNumberToInsert)
        {
            customerPhoneNumberToInsert = null;
        }

        if (customerPhoneNumber.Customer == null)
        {
            customer!.CustomerPhoneNumbers!.Add(customerPhoneNumber);
        }

        else
        {
            databaseContext!.Update(customerPhoneNumber);
        }
    }

    private void OnSubmitCustomer()
    {
        foreach (CustomerPhoneNumber customerPhoneNumber in customer.CustomerPhoneNumbers)
        {
            if (string.IsNullOrEmpty(customerPhoneNumber.PhoneNumber))
            {
                databaseContext!.Remove(customerPhoneNumber);
            }
        }

        customer!.Update(azureUser!);
        databaseContext!.SaveChanges();
        NavigationManager.NavigateTo("/customer/" + customer.Id, true);
    }

    private void CloseDialog(dynamic result)
    {
        if (result != null && result is bool && result)
        {
            customer!.Delete(azureUser!);
            databaseContext!.SaveChanges();
            NavigationManager.NavigateTo("/customers/", true);
        }
    }
}
